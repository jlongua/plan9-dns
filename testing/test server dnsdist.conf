-- dnsdist config (2.dnscrypt-cert.)

function file_exists(name)
   local file = io.open(name, "r")
   if file ~= nil then
       io.close(file)
       return true
   else
       return false
   end
end

-- set local serial from saved file
local f = io.open("/var/lib/dnsdist/serial", "r")
local serial = tonumber(f:read())
f:close()

local fullchain = "/etc/zerossl/plan9-dns.com_ecc/fullchain.pem"
local privkey = "/etc/zerossl/plan9-dns.com_ecc/private.key"

setLocal("127.0.0.1:5353")

-- allow query from all IP addresses
addACL('0.0.0.0/0')
addACL('::/0')

-- add a DoH resolver listening on port 443 of all interfaces
addDOHLocal(
    "0.0.0.0", fullchain, privkey,
    { "/dns-query" }, { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

addDOHLocal(
    "[::]", fullchain, privkey,
    { "/dns-query" }, { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

-- add a DoT resolver listening on port 853 of all interfaces
addTLSLocal(
    "0.0.0.0", fullchain, privkey,
    { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

addTLSLocal(
    "[::]", fullchain, privkey,
    { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

-- downstream resolver
newServer({address="127.0.0.1:53",qps=0, name="pdns-recursor", pool=""})
newServer({address="209.244.0.53", qps=15, name="level3", pool="abuse"})
newServer({address="208.67.222.222", qps=15, name="openDNS", pool="abuse"})
newServer({address="64.42.181.227", qps=15, name="cryptostorm", pool="abuse"})
newServer({address="1.1.1.1", qps=15, name="cloudflare", pool="abuse"})
newServer({address="8.8.8.8", qps=15, name="google", pool="abuse"})
setServerPolicy(roundrobin)

addAction(MaxQPSIPRule(25), PoolAction("abuse"))
addAction({"192.241.128.0/17", "120.196.165.40"}, PoolAction("abuse"))
addAction({'starchat.net.', 'tracker.publicbt.com.'}, PoolAction("abuse"))

-- truncate ANY queries
addAction(AndRule{QTypeRule(DNSQType.ANY), TCPRule(false)}, TCAction())
addAction(AndRule{QTypeRule(DNSQType.ANY), TCPRule(true)}, TCAction())

-- https://github.com/clayauld/Secure-Adblocking-DNS/blob/master/dnsdist/dnsdist.conf
setMaxTCPConnectionsPerClient(1000)
setMaxTCPQueriesPerConnection(100)
SetDisableECSAction()

pc = newPacketCache(
    100000,
    {maxTTL=86400, minTTL=0, temporaryFailureTTL=60, staleTTL=60, dontAge=false}
)
getPool(""):setCache(pc)

-- enable local control socket, need to generate key
controlSocket('127.0.0.1:5199')
setKey("RK7eOv4FfyT5IlHsokn24T9YX8chNU+VsjbxhGzfTek=")

-- dynBlock
local dbr = dynBlockRulesGroup()
dbr:excludeRange({"127.0.0.1/32"})
dbr:setQueryRate(100, 10, "Exceeded query rate", 60)
dbr:setRCodeRate(DNSRCode.NXDOMAIN, 10, 10, "Exceeded NXD rate", 60)
dbr:setRCodeRate(DNSRCode.SERVFAIL, 10, 10, "Exceeded ServFail rate", 60)
dbr:setQTypeRate(DNSQType.ANY, 2, 10, "Exceeded ANY rate", 60)
dbr:setResponseByteRate(10000, 10, "Exceeded resp BW rate", 60, DNSAction.Drop)

-- dnscrypt cert rotation
local last = os.time() - 7200
    function maintenance()
      local now = os.time()
      if ((now - last) > 21600) then
        serial = serial + 1
        generateDNSCryptCertificate(
          "/var/lib/dnsdist/providerPrivate.key",
          "/var/lib/dnsdist/resolver.cert",
          "/var/lib/dnsdist/resolver.key",
          serial, now - 60, now + 43200,
          DNSCryptExchangeVersion.VERSION2)
        getDNSCryptBind(0):loadNewCertificate(
          '/var/lib/dnsdist/resolver.cert',
          '/var/lib/dnsdist/resolver.key')
        last = now
        local f = io.open("/var/lib/dnsdist/serial", "w+")
        f:write(serial)
        f:close()
      end
    dbr:apply()
    end

if not file_exists("/var/lib/dnsdist/providerPublic.key") or not file_exists("/var/lib/dnsdist/providerPrivate.key") then
   generateDNSCryptProviderKeys(
     "/var/lib/dnsdist/providerPublic.key",
     "/var/lib/dnsdist/providerPrivate.key")
end

if not file_exists("/var/lib/dnsdist/resolver.cert") or not file_exists("/var/lib/dnsdist/resolver.key") then
   generateDNSCryptCertificate(
     "/var/lib/dnsdist/providerPrivate.key",
     "/var/lib/dnsdist/resolver.cert",
     "/var/lib/dnsdist/resolver.key",
     serial, os.time() - 60, os.time() + 43200,
     DNSCryptExchangeVersion.VERSION2)
end

addDNSCryptBind(
   "0.0.0.0:8443",
   "2.dnscrypt-cert.kronos.plan9-dns.com",
   "/var/lib/dnsdist/resolver.cert",
   "/var/lib/dnsdist/resolver.key",
   { maxConcurrentTCPConnections=250 }
)

webserver("0.0.0.0:8083")
setWebserverConfig({password="$scrypt$ln=10,p=1,r=8$", apiKey="$scrypt$ln=10,p=1,r=8$", acl="0.0.0.0/0"})

--function luaaction(dq)
--  if(dq.qtype==DNSQType.ANY)
--  then
--    return DNSAction.Pool, "abuse"
--  else
--    return DNSAction.None, ""
--  end
--end

-- addAction(AllRule(), LuaAction(luaaction))
