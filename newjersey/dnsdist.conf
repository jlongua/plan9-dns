-- dnsdist config (2.dnscrypt-cert.)

function file_exists(name)
   local file = io.open(name, "r")
   if file ~= nil then
       io.close(file)
       return true
   else
       return false
   end
end

local fullchain = "/etc/zerossl/plan9-dns.com_ecc/fullchain.pem"
local privkey = "/etc/zerossl/plan9-dns.com_ecc/private.key"

setLocal("127.0.0.1:5353")

-- allow query from all IP addresses
addACL('0.0.0.0/0')
addACL('::/0')

-- add a DoH resolver listening on port 443 of all interfaces
addDOHLocal(
    "0.0.0.0", fullchain, privkey,
    { "/dns-query" }, { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

addDOHLocal(
    "[::]", fullchain, privkey,
    { "/dns-query" }, { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

-- add a DoT resolver listening on port 853 of all interfaces
addTLSLocal(
    "0.0.0.0", fullchain, privkey,
    { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

addTLSLocal(
    "[::]", fullchain, privkey,
    { reusePort=true, tcpFastOpenSize=0, minTLSVersion='tls1.2' }
)

-- downstream resolver
newServer({address="127.0.0.1:53",qps=0, name="pdns-recursor"})


pc = newPacketCache(
    100000,
    {maxTTL=86400, minTTL=0, temporaryFailureTTL=60, staleTTL=60, dontAge=false}
)
getPool(""):setCache(pc)

-- enable local control socket, need to generate key
controlSocket('127.0.0.1:5199')
setKey("zhJFVmaRqf6MNH+HTRE1q0OzlgqlwFCu5a4x94ciSuo=")

-- dynBlock
local dbr = dynBlockRulesGroup()
dbr:excludeRange({"127.0.0.1/32"})
dbr:setQueryRate(50, 10, "Exceeded query rate", 60)
dbr:setRCodeRate(DNSRCode.NXDOMAIN, 10, 10, "Exceeded NXD rate", 60)
dbr:setRCodeRate(DNSRCode.SERVFAIL, 10, 10, "Exceeded ServFail rate", 60)
dbr:setQTypeRate(DNSQType.ANY, 2, 10, "Exceeded ANY rate", 60)
dbr:setResponseByteRate(10000, 10, "Exceeded resp BW rate", 60)

-- dnscrypt cert rotation
local last = os.time() - 7200
    function maintenance()
      local now = os.time()
      if ((now - last) > 21600) then
        generateDNSCryptCertificate(
          "/var/lib/dnsdist/providerPrivate.key",
          "/var/lib/dnsdist/resolver.cert",
          "/var/lib/dnsdist/resolver.key",
          now - 1600000000, now - 60, now + 43200,
          DNSCryptExchangeVersion.VERSION2)
        getDNSCryptBind(0):loadNewCertificate(
          '/var/lib/dnsdist/resolver.cert',
          '/var/lib/dnsdist/resolver.key')
        last = now
      end
    dbr:apply()
    end

if not file_exists("/var/lib/dnsdist/providerPublic.key") or not file_exists("/var/lib/dnsdist/providerPrivate.key") then
   generateDNSCryptProviderKeys(
     "/var/lib/dnsdist/providerPublic.key",
     "/var/lib/dnsdist/providerPrivate.key")
end

if not file_exists("/var/lib/dnsdist/resolver.cert") or not file_exists("/var/lib/dnsdist/resolver.key") then
   generateDNSCryptCertificate(
     "/var/lib/dnsdist/providerPrivate.key",
     "/var/lib/dnsdist/resolver.cert",
     "/var/lib/dnsdist/resolver.key",
     os.time() - 1600000000, os.time() - 60, os.time() + 43200,
     DNSCryptExchangeVersion.VERSION2)
end

addDNSCryptBind(
   "0.0.0.0:8443",
   "2.dnscrypt-cert.kronos.plan9-dns.com",
   "/var/lib/dnsdist/resolver.cert",
   "/var/lib/dnsdist/resolver.key"
)
